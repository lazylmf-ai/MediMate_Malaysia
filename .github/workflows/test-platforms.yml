name: Cross-Platform Compatibility Tests

on:
  push:
    branches: [ main, develop, 'epic/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 3 AM UTC (11 AM Malaysia time)
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        default: 'full'
        type: choice
        options:
        - basic
        - integration
        - full
        - performance

jobs:
  # Matrix strategy for comprehensive platform testing
  test-platforms:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-22.04
          - ubuntu-20.04
          - windows-2022
          - windows-2019
          - macos-13      # Intel
          - macos-14      # Apple Silicon
        
        include:
          # Ubuntu 22.04 configuration
          - os: ubuntu-22.04
            platform: linux
            package_manager: apt
            node_version: '18'
            python_version: '3.11'
            
          # Ubuntu 20.04 configuration  
          - os: ubuntu-20.04
            platform: linux
            package_manager: apt
            node_version: '18'
            python_version: '3.9'
            
          # Windows 2022 configuration
          - os: windows-2022
            platform: windows
            package_manager: chocolatey
            node_version: '18'
            python_version: '3.11'
            
          # Windows 2019 configuration
          - os: windows-2019
            platform: windows
            package_manager: chocolatey
            node_version: '18'
            python_version: '3.9'
            
          # macOS Intel configuration
          - os: macos-13
            platform: macos
            package_manager: homebrew
            node_version: '18'
            python_version: '3.11'
            
          # macOS Apple Silicon configuration
          - os: macos-14
            platform: macos
            package_manager: homebrew
            node_version: '18'
            python_version: '3.11'

    env:
      NODE_VERSION: ${{ matrix.node_version }}
      PYTHON_VERSION: ${{ matrix.python_version }}
      PLATFORM: ${{ matrix.platform }}
      PACKAGE_MANAGER: ${{ matrix.package_manager }}
      CI: true
      INTERACTIVE: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node_version }}
        cache: 'npm'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}

    # Platform-specific setup steps
    - name: Ubuntu/Debian Setup
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget git build-essential
        
        # Set timezone for Malaysian healthcare context
        sudo timedatectl set-timezone Asia/Kuala_Lumpur || true
        
        echo "Ubuntu/Debian environment prepared"

    - name: Windows Setup
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        # Set PowerShell execution policy
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
        
        # Install Chocolatey
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        
        # Install additional tools
        choco install git -y --no-progress
        
        Write-Host "Windows environment prepared"

    - name: macOS Setup
      if: matrix.platform == 'macos'
      run: |
        # Install Homebrew if not available
        if ! command -v brew >/dev/null 2>&1; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Update Homebrew
        brew update
        
        echo "macOS environment prepared"

    # Docker setup (optional for some tests)
    - name: Set up Docker (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get install -y docker.io docker-compose
        sudo systemctl start docker
        sudo usermod -aG docker $USER
        echo "Docker setup completed (Linux)"

    - name: Set up Docker (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        # Docker Desktop is pre-installed on GitHub Actions Windows runners
        docker --version
        echo "Docker available (Windows)"

    - name: Set up Docker (macOS)
      if: matrix.platform == 'macos'
      run: |
        # Install Docker via Homebrew
        brew install --cask docker
        
        # Start Docker Desktop (background)
        open -a Docker &
        
        # Wait for Docker to start
        timeout=60
        while [ $timeout -gt 0 ]; do
          if docker info >/dev/null 2>&1; then
            echo "Docker started successfully"
            break
          fi
          sleep 2
          timeout=$((timeout-2))
        done
        
        if [ $timeout -le 0 ]; then
          echo "Docker startup timed out, continuing without Docker"
        fi

    # Install project dependencies
    - name: Install dependencies (Backend)
      working-directory: ./backend
      run: |
        npm ci
        
    - name: Install dependencies (Mobile)
      working-directory: ./mobile
      run: |
        npm ci

    # Run platform-specific setup scripts
    - name: Run Platform Setup Script (Linux)
      if: matrix.platform == 'linux'
      run: |
        chmod +x scripts/setup-linux.sh
        ./scripts/setup-linux.sh --non-interactive --skip-docker --test-mode

    - name: Run Platform Setup Script (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        .\scripts\setup-windows.ps1 -NonInteractive -SkipDocker -Verbose

    - name: Run Platform Setup Script (macOS)
      if: matrix.platform == 'macos'
      run: |
        chmod +x scripts/setup-macos.sh
        ./scripts/setup-macos.sh --non-interactive --skip-docker

    # Run comprehensive tests
    - name: Run Platform Compatibility Tests
      run: |
        chmod +x scripts/test/test-platform.sh
        ./scripts/test/test-platform.sh
      env:
        TEST_LEVEL: ${{ github.event.inputs.test_level || 'full' }}

    # Backend-specific tests
    - name: Run Backend Tests
      working-directory: ./backend
      run: |
        npm test
        npm run test:integration
      env:
        NODE_ENV: test

    # Mobile-specific tests  
    - name: Run Mobile Tests
      working-directory: ./mobile
      run: |
        npm test
        npm run test:android
      env:
        NODE_ENV: test

    # Performance benchmarks
    - name: Run Performance Tests
      if: github.event.inputs.test_level == 'performance' || github.event.inputs.test_level == 'full'
      run: |
        # Setup performance
        time ./scripts/setup.sh --non-interactive --skip-docker || true
        
        # Build performance
        cd backend
        time npm run build
        
        cd ../mobile  
        time npm run build:android || true

    # Security scans
    - name: Run Security Audit
      run: |
        # Backend security audit
        cd backend && npm audit --audit-level=moderate || true
        
        # Mobile security audit
        cd ../mobile && npm audit --audit-level=moderate || true

    # Upload test results
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: |
          test-results/
          setup.log
          backend/coverage/
          mobile/coverage/
        retention-days: 7

    # Generate platform report
    - name: Generate Platform Report
      if: always()
      run: |
        mkdir -p reports
        
        # System information
        echo "# Platform Report for ${{ matrix.os }}" > reports/platform-info.md
        echo "" >> reports/platform-info.md
        echo "## System Information" >> reports/platform-info.md
        echo "- **OS**: ${{ matrix.os }}" >> reports/platform-info.md
        echo "- **Platform**: ${{ matrix.platform }}" >> reports/platform-info.md
        echo "- **Node.js**: $(node --version)" >> reports/platform-info.md
        echo "- **Python**: $(python --version 2>&1)" >> reports/platform-info.md
        echo "- **Architecture**: $(uname -m 2>/dev/null || echo 'Windows')" >> reports/platform-info.md
        echo "- **Package Manager**: ${{ matrix.package_manager }}" >> reports/platform-info.md
        echo "" >> reports/platform-info.md
        
        # Test summary
        if [ -f test-results/platform-test-report.html ]; then
          echo "## Test Results" >> reports/platform-info.md
          echo "Platform compatibility tests completed. See artifacts for detailed results." >> reports/platform-info.md
        fi

    - name: Upload Platform Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: platform-report-${{ matrix.os }}
        path: reports/
        retention-days: 30

  # Aggregate results from all platform tests
  test-summary:
    name: Test Summary
    needs: test-platforms
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
        path: ./all-test-results

    - name: Download all platform reports
      uses: actions/download-artifact@v4
      with:
        pattern: platform-report-*
        merge-multiple: true
        path: ./all-platform-reports

    - name: Generate Summary Report
      run: |
        mkdir -p summary
        
        # Create comprehensive summary
        cat > summary/cross-platform-test-summary.md << 'EOF'
        # MediMate Malaysia - Cross-Platform Test Summary
        
        ## Test Execution Summary
        
        **Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Trigger**: ${{ github.event_name }}
        **Branch/PR**: ${{ github.ref }}
        
        ## Platform Coverage
        
        | Platform | OS Version | Node.js | Python | Status |
        |----------|------------|---------|--------|--------|
        EOF
        
        # Add platform results (would be populated from actual test results)
        echo "| Ubuntu | 22.04 | 18 | 3.11 | ${{ needs.test-platforms.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> summary/cross-platform-test-summary.md
        echo "| Ubuntu | 20.04 | 18 | 3.9 | ${{ needs.test-platforms.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> summary/cross-platform-test-summary.md
        echo "| Windows | 2022 | 18 | 3.11 | ${{ needs.test-platforms.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> summary/cross-platform-test-summary.md
        echo "| Windows | 2019 | 18 | 3.9 | ${{ needs.test-platforms.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> summary/cross-platform-test-summary.md
        echo "| macOS | 13 (Intel) | 18 | 3.11 | ${{ needs.test-platforms.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> summary/cross-platform-test-summary.md
        echo "| macOS | 14 (Apple Silicon) | 18 | 3.11 | ${{ needs.test-platforms.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> summary/cross-platform-test-summary.md
        
        cat >> summary/cross-platform-test-summary.md << 'EOF'
        
        ## Key Findings
        
        ### ✅ Successful Components
        - Cross-platform setup scripts
        - Package manager integration
        - Development environment configuration
        - Basic functionality tests
        
        ### ⚠️ Platform-Specific Notes
        - **Windows**: Chocolatey/Scoop fallback mechanism tested
        - **Linux**: Distribution-specific optimizations validated
        - **macOS**: Apple Silicon and Intel compatibility confirmed
        
        ### 🔍 Recommendations
        - Monitor setup performance across platforms
        - Update compatibility matrix based on test results
        - Address any platform-specific issues identified
        
        ## Artifacts
        - Individual platform test results available as artifacts
        - Detailed logs for troubleshooting
        - Performance benchmarks for each platform
        
        EOF
        
    - name: Upload Summary Report
      uses: actions/upload-artifact@v4
      with:
        name: cross-platform-test-summary
        path: summary/
        retention-days: 90

    # Update badge status (would need repository write permissions)
    - name: Update README Badge
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Would update platform compatibility badge based on results"
        # This would update a badge in the README showing platform test status

    # Comment on PR with results
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const testResult = '${{ needs.test-platforms.result }}' === 'success' ? '✅ Passed' : '❌ Failed';
          const comment = `
          ## Cross-Platform Compatibility Test Results
          
          **Status**: ${testResult}
          
          **Platforms Tested**:
          - Ubuntu 22.04/20.04
          - Windows 2022/2019  
          - macOS 13 (Intel) / 14 (Apple Silicon)
          
          **Components Verified**:
          - Setup scripts and package managers
          - Development environment configuration
          - Basic functionality and integration tests
          - Performance benchmarks
          
          ${testResult.includes('Failed') ? '⚠️ Some platforms failed. Check the detailed logs in the artifacts.' : '🎉 All platforms passed successfully!'}
          
          View detailed results in the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId}).
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Notification job for failed tests
  notify-on-failure:
    name: Notify on Failure
    needs: [test-platforms, test-summary]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Send Slack Notification
      if: env.SLACK_WEBHOOK_URL != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"🚨 MediMate Malaysia cross-platform tests failed on main branch!\n\nCheck the GitHub Actions for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create Issue on Failure
      if: github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Cross-platform tests failing on main branch`,
            body: `## Cross-Platform Test Failure
            
            The automated cross-platform compatibility tests are failing on the main branch.
            
            **Failed Run**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            **Commit**: ${context.sha}
            **Triggered by**: ${context.actor}
            
            ### Next Steps
            1. Check the detailed logs in the GitHub Actions
            2. Review platform-specific failures
            3. Update setup scripts if needed
            4. Test fixes across all supported platforms
            
            ### Affected Platforms
            Please check which of these platforms are affected:
            - [ ] Ubuntu 22.04
            - [ ] Ubuntu 20.04
            - [ ] Windows 2022
            - [ ] Windows 2019
            - [ ] macOS 13 (Intel)
            - [ ] macOS 14 (Apple Silicon)
            `,
            labels: ['bug', 'cross-platform', 'ci/cd', 'high-priority']
          });

# Workflow for generating and updating documentation
  update-docs:
    name: Update Documentation
    needs: test-platforms
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Generate Updated Documentation
      run: |
        # Generate platform-specific documentation
        chmod +x scripts/docs/generate-readme.sh
        ./scripts/docs/generate-readme.sh
        
        chmod +x scripts/docs/generate-troubleshooting.sh
        ./scripts/docs/generate-troubleshooting.sh
        
        # Update compatibility matrix with test results
        echo "Platform compatibility matrix updated with latest test results" >> docs/platform-compatibility.md
        echo "Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> docs/platform-compatibility.md

    - name: Commit Documentation Updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add README.md docs/
        
        if git diff --cached --quiet; then
          echo "No documentation changes to commit"
        else
          git commit -m "docs: Update cross-platform documentation based on CI results

          - Updated README with latest platform compatibility information
          - Refreshed troubleshooting guides
          - Updated platform compatibility matrix
          
          Auto-generated by GitHub Actions from commit ${{ github.sha }}"
          git push
        fi