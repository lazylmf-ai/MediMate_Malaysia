#!/usr/bin/env sh
# 
# MediMate Malaysia Pre-commit Hook
# Healthcare-grade code quality validation with Malaysian cultural compliance
# PDPA compliance and security validation for healthcare data
#

. "$(dirname -- "$0")/_/husky.sh"

echo "🏥 MediMate Malaysia - Healthcare Code Quality Validation"
echo "======================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Track validation results
VALIDATION_PASSED=true

log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
    VALIDATION_PASSED=false
}

# 1. Lint and format code
echo "\n📋 Running Code Quality Checks..."
echo "--------------------------------"

# Run ESLint with healthcare-specific rules
log_info "Running ESLint healthcare validation..."
if npx lint-staged --config lint-staged.config.js; then
    log_success "Code formatting and linting passed"
else
    log_error "Code formatting or linting failed"
fi

# 2. Healthcare Security Validation
echo "\n🔐 Healthcare Security Validation..."
echo "-----------------------------------"

# Check for healthcare data patterns that shouldn't be committed
log_info "Scanning for healthcare security violations..."

# Check for patient data patterns
if git diff --cached --name-only | xargs grep -l -E "(patient_id|ic_number|health_record)" 2>/dev/null | grep -v "test\|spec\|mock" | head -1; then
    log_error "Potential patient data found in non-test files"
    echo "Files containing healthcare identifiers must be in test directories"
fi

# Check for hardcoded credentials
if git diff --cached --name-only | xargs grep -l -E "(password|secret|key|token).*=.*['\"][^'\"]*['\"]" 2>/dev/null | head -1; then
    log_error "Hardcoded credentials detected"
    echo "Remove hardcoded credentials and use environment variables"
fi

# Check for SQL injection vulnerabilities
if git diff --cached --name-only | xargs grep -l -E "SELECT.*\+.*\$|INSERT.*\+.*\$|UPDATE.*\+.*\$" 2>/dev/null | head -1; then
    log_error "Potential SQL injection vulnerability detected"
    echo "Use parameterized queries for database operations"
fi

# 3. PDPA Compliance Validation
echo "\n📋 PDPA Compliance Validation..."
echo "-------------------------------"

log_info "Checking PDPA compliance for healthcare data..."

# Ensure test data is properly marked
if git diff --cached --name-only | xargs grep -l "ic_number\|patient" 2>/dev/null | xargs grep -L "is_test_data.*true" 2>/dev/null | grep -v "\.md$" | head -1; then
    log_error "Healthcare data files must include 'is_test_data: true' marker"
    echo "All test healthcare data must be clearly marked as test data"
fi

# Check for consent tracking in healthcare operations
if git diff --cached --name-only | xargs grep -l "patient.*create\|patient.*update" 2>/dev/null | xargs grep -L "pdpa_consent\|consent" 2>/dev/null | head -1; then
    log_error "Patient operations must include PDPA consent tracking"
fi

# 4. Malaysian Cultural Validation
echo "\n🇲🇾 Malaysian Cultural Validation..."
echo "----------------------------------"

log_info "Validating Malaysian cultural compliance..."

# Check prayer time format
if git diff --cached --name-only | xargs grep -l "prayer.*time" 2>/dev/null | xargs grep -E "prayer.*[0-9]{1,2}:[0-9]{2}" 2>/dev/null | grep -v -E "([01][0-9]|2[0-3]):[0-5][0-9]" | head -1; then
    log_error "Invalid prayer time format detected"
    echo "Prayer times must be in HH:MM 24-hour format"
fi

# Check Malaysian date format
if git diff --cached --name-only | xargs grep -l -E "(date|Date)" 2>/dev/null | xargs grep -E "[0-9]{4}-[0-9]{2}-[0-9]{2}" 2>/dev/null | head -1; then
    log_warning "Consider using Malaysian DD/MM/YYYY format for user-facing dates"
fi

# Validate Malaysian IC format in code
if git diff --cached --name-only | xargs grep -l "ic.*format\|ic.*valid" 2>/dev/null | xargs grep -E "[0-9]{6}-[0-9]{2}-[0-9]{4}" 2>/dev/null | head -1; then
    log_success "Malaysian IC format validation found"
else
    if git diff --cached --name-only | xargs grep -l "ic_number\|icNumber" 2>/dev/null | head -1; then
        log_warning "IC number processing found - ensure Malaysian format validation"
    fi
fi

# 5. Test Coverage Validation
echo "\n🧪 Test Coverage Validation..."
echo "-----------------------------"

log_info "Checking test coverage for healthcare modules..."

# Check if healthcare modules have corresponding tests
healthcare_files=$(git diff --cached --name-only | grep -E "(healthcare|pdpa|security|cultural).*\.(ts|js)$" | grep -v "test\|spec")
if [ ! -z "$healthcare_files" ]; then
    for file in $healthcare_files; do
        test_file_patterns=(
            "${file%.ts}.test.ts"
            "${file%.js}.test.js"
            "${file%.ts}.spec.ts" 
            "${file%.js}.spec.js"
            "$(dirname $file)/__tests__/$(basename ${file%.ts}).test.ts"
            "$(dirname $file)/__tests__/$(basename ${file%.js}).test.js"
        )
        
        test_exists=false
        for pattern in "${test_file_patterns[@]}"; do
            if [ -f "$pattern" ]; then
                test_exists=true
                break
            fi
        done
        
        if [ "$test_exists" = false ]; then
            log_warning "Healthcare module $file may need corresponding tests"
        fi
    done
fi

# 6. Bundle Size Check (for mobile)
echo "\n📱 Mobile Bundle Size Check..."
echo "-----------------------------"

if git diff --cached --name-only | grep -E "mobile/src" | head -1; then
    log_info "Mobile changes detected - checking for large files..."
    
    large_files=$(git diff --cached --name-only | xargs ls -la 2>/dev/null | awk '$5 > 500000 {print $9, $5}')
    if [ ! -z "$large_files" ]; then
        log_warning "Large files detected for mobile bundle:"
        echo "$large_files"
        log_warning "Consider optimizing assets for Malaysian mobile networks"
    fi
fi

# 7. Documentation Updates
echo "\n📚 Documentation Validation..."
echo "-----------------------------"

# Check if API changes have documentation updates
api_files=$(git diff --cached --name-only | grep -E "(routes|api|controller)" | head -1)
docs_files=$(git diff --cached --name-only | grep -E "(\.md$|docs/)" | head -1)

if [ ! -z "$api_files" ] && [ -z "$docs_files" ]; then
    log_warning "API changes detected but no documentation updates found"
    log_info "Consider updating relevant documentation for healthcare APIs"
fi

# 8. Malaysian Compliance Final Check
echo "\n🏥 Final Malaysian Healthcare Compliance..."
echo "----------------------------------------"

# Ensure no real Malaysian healthcare data in commits
if git diff --cached | grep -E "(MOH|Hospital|Klinik)" | grep -v -E "(test|mock|example)" | head -1; then
    log_warning "Real Malaysian healthcare institution names detected"
    log_info "Ensure this is intentional and not test data leakage"
fi

# Check for Malaysian state codes
malaysian_states="JHR|KDH|KTN|MLK|NSN|PHG|PRK|PLS|PNG|SBH|SWK|SGR|TRG|KUL|LBN|PJY"
if git diff --cached | grep -E "($malaysian_states)" | head -1; then
    log_success "Malaysian state codes found - validating cultural context"
fi

# 9. Final Validation Summary
echo "\n📊 Validation Summary..."
echo "----------------------"

if [ "$VALIDATION_PASSED" = true ]; then
    log_success "All healthcare code quality validations passed!"
    echo ""
    echo "🏥 Your code meets MediMate Malaysia healthcare standards:"
    echo "   ✅ Code quality and formatting"
    echo "   ✅ Healthcare security compliance" 
    echo "   ✅ PDPA privacy protection"
    echo "   ✅ Malaysian cultural validation"
    echo "   ✅ Test coverage guidelines"
    echo ""
    echo "🇲🇾 Ready to commit healthcare-grade code!"
    echo ""
else
    log_error "Healthcare validation failed!"
    echo ""
    echo "❌ Please fix the issues above before committing."
    echo "🏥 Healthcare code must meet strict quality standards."
    echo ""
    echo "For help with Malaysian healthcare compliance:"
    echo "  📚 docs/healthcare-compliance.md"
    echo "  📋 docs/code-quality-standards.md" 
    echo "  🇲🇾 docs/malaysian-cultural-guidelines.md"
    echo ""
    exit 1
fi