version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: medimate_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medimate_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_TEST_DB:-medimate_test}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./docker/postgres/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
      - ./docker/postgres/seed-data.sql:/docker-entrypoint-initdb.d/03-seed-data.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - medimate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-medimate_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: medimate_redis
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - medimate-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: medimate_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-medimate-uploads,medimate-avatars,medimate-documents}
    volumes:
      - minio_data:/data
      - ./docker/minio/init-buckets.sh:/usr/bin/init-buckets.sh:ro
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - medimate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # MinIO Client for bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: medimate_minio_init
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-medimate-uploads,medimate-avatars,medimate-documents}
    networks:
      - medimate-network
    entrypoint: |
      sh -c "
      mc alias set minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}
      
      # Wait for MinIO to be ready
      until mc ready minio; do
        echo 'Waiting for MinIO to be ready...'
        sleep 2
      done
      
      # Create buckets
      for bucket in $${MINIO_DEFAULT_BUCKETS//,/ }; do
        if ! mc ls minio/$$bucket > /dev/null 2>&1; then
          echo 'Creating bucket:' $$bucket
          mc mb minio/$$bucket
          mc policy set public minio/$$bucket
        else
          echo 'Bucket already exists:' $$bucket
        fi
      done
      
      echo 'MinIO initialization completed'
      "
    restart: "no"

  # pgAdmin (Development Only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: medimate_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@medimate.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - medimate-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - dev
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

networks:
  medimate-network:
    driver: bridge
    name: medimate-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    name: medimate_postgres_data
    driver: local
  redis_data:
    name: medimate_redis_data
    driver: local
  minio_data:
    name: medimate_minio_data
    driver: local
  pgadmin_data:
    name: medimate_pgadmin_data
    driver: local